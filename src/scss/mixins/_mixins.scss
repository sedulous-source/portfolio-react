@use 'sass:meta';

// Inlineblock
@mixin inline-block() {
  display: inline-block;
  vertical-align: top;
  zoom: 1;
}

@mixin absoluted-fullwidth {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

@mixin bg-img($bg-position, $bg-repeat, $bg-size) {
  background-position: $bg-position;
  background-repeat: $bg-repeat;
  background-size: $bg-size;
}

// Placeholder mixin
@mixin placeholder($color) {
  ::placeholder {
    color: $color;
  }
}

// ----------------------------------------------------------------------
// Transitions
// ----------------------------------------------------------------------
// example: @include single-transition(background, 1s, ease-in-out, 0);

@mixin transition($property, $duration, $timing-function, $delay) {
  transition: $property $duration $timing-function $delay;
}

@mixin columns($num, $gap) {
  column-count: $num;
  column-gap: $gap;
}

//Pseudo mixin. Eg. @include content (red, 10px, 100px, auto, $margin: true);
@mixin content($bg, $br:0, $height, $width, $margin, $m: false) {
  background: $bg;
  border-radius: $br;
  content: '';
  display: block;
  height: $height;
  width: $width;

  @if $m {
    margin: $margin;
  }
}

// Pseudo mixin with background image
@mixin background-img($bg-img, $bg-position, $bg-size, $min-height, $min-width) {
  background-image: url($bg-img);
  background-position: $bg-position;
  background-size: $bg-size;
  min-height: $min-height;
  min-width: $min-width;
}

// Alignment. Eg. @include align(center);
@mixin align($alignment) {
  position: absolute;

  @if $alignment == vertically-center {
    top: 50%;
    transform: translateY(-50%);
  }
  @else if $alignment == horizontally-center {
    left: 50%;
    transform: translateX(-50%);
  }
  @else if $alignment == center {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
  }
  @else {
    @error "Invalid Alignment: `#{$alignment}`. Use 'vertically-center' or 'horizontally-center' or 'center'.";
  }
}

// Absolute Position. Eg. @include position (absolute, top, 50%, right, 0);
@mixin position ($position, $first, $first-value, $second, $second-value) {
  position: $position;

  @if $first == top {
    top: $first-value;
  }
  @else if $first == bottom {
    bottom: $first-value;
  }
  @else if $first == left {
    left: $first-value;
  }
  @else if $first == right {
    right: $first-value;
  }
  @if $second == right {
    right: $second-value;
  }
  @else if $second == left {
    left: $second-value;
  }
  @else if $second == top {
    top: $second-value;
  }
  @else if $second == bottom {
    bottom: $second-value;
  }
  @else {
    @error 'Invalid Position: `#{$first}` or `#{$second}`. Example: @include position(absolute, top, top-value, right, right-value);';
  }
}

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == 'list' {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}

// frame space before class
@mixin beforespacing($args...) {
  @each $before in meta.keywords($args) { 
    .frame-space-before-#{nth($before,1)} {
      padding-top: nth($before, 2) + px;
    }
  }
}

// frame space after class
@mixin afterspacing($args...) {
  @each $after in meta.keywords($args) { 
    .frame-space-after-#{nth($after,1)} {
      padding-bottom: nth($after, 2) + px;
    }
  }
}

// Focus Element
// Pseudo Element| Color Name | Top | Left
@mixin focus-states($pseudo,$color,$top,$left) {
  position: relative;
  
  &::#{$pseudo} {
    border: 2px solid $color;
    content: '';
    height: calc(100% + #{$top}px);
    left: -($left / 2)+px;
    position: absolute;
    top: -($top / 2)+px;
    width: calc(100% + #{$left}px);
  }
}

